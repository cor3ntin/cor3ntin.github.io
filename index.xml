<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cor3ntin</title>
    <link>/</link>
    <description>Recent content on cor3ntin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; Attributes</title>
      <link>/posts/attributes/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/attributes/</guid>
      <description>In C++11, attributes were added as a way to standardized features such as gnu __attribute__and msvc’s __declspec.
The language provisions for standard attributes as well as non-standard attributes through the use of namespaces, though the behavior of non-standard attributes was only settled for C++17. And sadly, as of 2018, neither GCC nor MSVC offer their vendor-specific attributes though the portable C++ standard syntax.
Most standard attributes were added in C++14 and 17.</description>
    </item>
    
    <item>
      <title>Accio Dependency Manager</title>
      <link>/posts/dep_manager/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/dep_manager/</guid>
      <description>You may have noticed a number of “What should go in the Standard Library” posts over the last few days. These posts have generated quite a bit of comments on Reddit and discussions on Slack. I hope more people chime in.
The conclusion is that we pretty much all agree to disagree on what the STL is or should be. I’m not sure we can even agree on what C++ is.</description>
    </item>
    
    <item>
      <title>A cake for your cherry: what should go in the C&#43;&#43; standard library?</title>
      <link>/posts/what_should_go_in_stl/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/what_should_go_in_stl/</guid>
      <description>This is a reply to Guy Davidson’s article “Batteries not included: what should go in the C++ standard library?”.
Over the past few years there has been a push to include a graphics library into the C++ standard. It would be something a bit like cairo. Or SDL. The proposal, in its current form, is here
In its current state, the library proposal can draw some shapes on a pre-allocated surface, has some support for images, and there are of courses projects to add text, maybe some input in the form of mouse / keyboard handling.</description>
    </item>
    
    <item>
      <title>On the state of cross-compilation in the C&#43;&#43; World</title>
      <link>/posts/cross_compilation/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/cross_compilation/</guid>
      <description>I wrote a series of article where I compile simple Windows and OSX applications from Linux.
I hope you enjoyed it. For me, it certainly was quite the journey. Or the beginning of one. There is lot of rooms for improvement and we left some area unexplored, including some other major Operating systems like Android and iOS. I also did not talk about debugging.
The open source community is amazing.</description>
    </item>
    
    <item>
      <title>A C&#43;&#43; Hello World And A Glass Of Wine, Oh My !</title>
      <link>/posts/helloworld_p1/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/helloworld_p1/</guid>
      <description>#include &amp;lt;iostream&amp;gt; int main() { std::cout &amp;lt;&amp;lt; &amp;#34;Hello, World\n&amp;#34;; }  Nothing to remove, nothing to add.
This is the proper “Hello World” in C++. All the others Hello World are wrong. But this is not where I rant about how using namespace std; crystallizes everything messed up with the teaching of C++. Another time perhaps.
Today we are gonna be compiling that hello world so that it can be executed on a target system.</description>
    </item>
    
    <item>
      <title>An Ode To Code Formatting Tools</title>
      <link>/posts/ode_formatting/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/ode_formatting/</guid>
      <description>Your modifications fix the calculation
But I’m afraid you forgot a tabulation.
This is the beginning of your tribulation.
Your perfect correction won’t bring you elation.
If there was a way to just automate,
Maybe you could avoid arguing with your mate.
Should there be a space after the bracket
How many white spaces, How many line breaks
Did you know tools could format your troubles away?
You have to choose, there is no midway</description>
    </item>
    
    <item>
      <title>Undefining the C&#43;&#43; Pre-processor</title>
      <link>/posts/undef_preprocessor/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/undef_preprocessor/</guid>
      <description>There are only two kinds of languages: the ones people complain about and the ones nobody uses — Bjarne Stroustrup
I like that quote. it explains both JavaScript and Haskell. And by that measure the preprocessor is a great language in that people use it, a lot. It’s never considered separately from C and C++, but if it was, it would be the number one language on TIOBE. The preprocessor is both extremely useful, and pervasive.</description>
    </item>
    
    <item>
      <title>Stranded with a C&#43;&#43; compiler and a bunch of queues</title>
      <link>/posts/stack_queue/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/posts/stack_queue/</guid>
      <description>A friend had a phone interview for a job in a company that I won’t name - It’s Microsoft. One of the questions was about describing how he would write a stack, only using standard queues.
I was confounded, because long before an algorithm could form in my mind, I already decided that there was no solution that would actually be useful in any real life scenario.
That the only solution I could find; To be honest, I was too lazy to come up with the algorithm myself, but it’s really straight forward.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/helloworld_p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/helloworld_p2/</guid>
      <description>A C++ Hello World And the Cute Heartless Rainbow This is Part two of a series wherein we build a “Hello World” application. If you are late to the party, I encourage you to check Part 1 first. A C++ Hello World And A Glass Of Wine, Oh My ! *Wherein we try to use the Microsoft Visual C++ Compiler on Linux*hackernoon.com
Hic Sunt Arcūs
So, our Boss came in to check on our progress.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/helloworld_p3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/helloworld_p3/</guid>
      <description>A C++ Hello World And The Rose Gold Walled Garden Of Doom This is Part 3 on my series about cross-compilation. You can check out Part 1 and Part 2 first ! A C++ Hello World And A Glass Of Wine, Oh My ! *Wherein we try to use the Microsoft Visual C++ Compiler on Linux*hackernoon.com A C++ Hello World And the Cute Heartless Rainbow *Wherein we cross-compile Qt Aplications for Windows with a couple of alien tool-chains and the power of rainbow.</description>
    </item>
    
  </channel>
</rss>